name: Examples Check

on:
  schedule:
    - cron: "0 16 * * *"     # daily at 16:00 UTC
  workflow_dispatch:
  push:
    branches:
      - test-workflows
  pull_request:
    branches:
      - main

jobs:
  run-java-example:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      HEDERA_NETWORK: local
      MIRROR_NODE_URL: http://localhost:5551/api/v1
      MIRROR_HEALTH_URL: http://localhost:5551/health   
      MIRROR_HEALTH_TRIES: "180"                      
      MIRROR_HEALTH_INTERVAL: "2"
      STATUS_DIR: .github/example-status
      STATUS_FILE: .github/example-status/java-status.md

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Solo
        id: solo
        uses: hiero-ledger/hiero-solo-action@v0.11.0
        with:
          installMirrorNode: true

      - name: Show assigned account
        run: |
          echo "ECDSA Account: ${{ steps.solo.outputs.ecdsaAccountId }}"
          echo "ECDSA PrivateKey: **** (redacted)"

      - name: Wait for Mirror Node
        env:
          HEALTH: ${{ env.MIRROR_HEALTH_URL }}
          API: ${{ env.MIRROR_NODE_URL }}
          TRIES: ${{ env.MIRROR_HEALTH_TRIES }}
          INTERVAL: ${{ env.MIRROR_HEALTH_INTERVAL }}
        shell: bash
        run: |
          set -euo pipefail
          base_api="${API%/}"                 # .../api/v1
          base_health="${HEALTH%/}"           # .../health
          alt_health="${base_api}/health"     # fallback if some builds expose this

          echo "Waiting for mirror health at: ${base_health} (or ${alt_health})"
          for i in $(seq 1 "${TRIES}"); do
            # Expect 200/204 from /health; use short timeouts so loop doesn't hang
            code="$(curl -m 2 --connect-timeout 2 -sS -o /dev/null -w '%{http_code}' "${base_health}" || true)"
            if [ "$code" = "200" ] || [ "$code" = "204" ]; then
              echo "‚úÖ /health is up"

              # Light API sanity check to ensure REST is answering under /api/v1
              if curl -m 3 --connect-timeout 2 -fsS "${base_api}/network/nodes?limit=1" > /dev/null; then
                echo "‚úÖ REST API (${base_api}) is responding"
                exit 0
              else
                echo "‚ÑπÔ∏è  Health OK but API not ready yet‚Ä¶"
              fi
            else
              # Try alternate legacy path once per loop
              if curl -m 2 --connect-timeout 2 -fsS "${alt_health}" > /dev/null; then
                echo "‚úÖ ${alt_health} responded; proceeding"
                exit 0
              fi
            fi

            echo "‚è≥ Mirror not ready (try $i/${TRIES})‚Ä¶"
            sleep "${INTERVAL}"
          done

          echo "‚ùå Mirror never became healthy"
          echo "üîé Debug:"
          echo "  Health:  $(curl -m 2 --connect-timeout 2 -sS -w ' [%{http_code}]' "${base_health}" || true)"
          echo "  Alt:     $(curl -m 2 --connect-timeout 2 -sS -w ' [%{http_code}]' "${alt_health}" || true)"
          echo "  API ping:$(curl -m 3 --connect-timeout 2 -sS -w ' [%{http_code}]' "${base_api}/network/nodes?limit=1" || true)"
          exit 1

      - name: Sanity check mirror endpoints
        env:
          URL: ${{ env.MIRROR_NODE_URL }}
        run: |
          set -euo pipefail
          base="${URL%/}"
          echo "GET ${base}/network/nodes?limit=1"
          curl -fsS "${base}/network/nodes?limit=1" | jq -C . || true
          echo "GET ${base}/accounts?limit=1"
          curl -fsS "${base}/accounts?limit=1" | jq -C . || true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Bootstrap Gradle for examples/java
        run: |
          chmod +x ./.github/scripts/java-gradle-bootstrap.sh
          ./.github/scripts/java-gradle-bootstrap.sh

      - name: Build & Run Java example
        id: run_java
        env:
          OPERATOR_ID: ${{ steps.solo.outputs.ecdsaAccountId }}
          OPERATOR_KEY: ${{ steps.solo.outputs.ecdsaPrivateKey }}
          HEDERA_NETWORK: ${{ env.HEDERA_NETWORK }}
          MIRROR_NODE_URL: ${{ env.MIRROR_NODE_URL }}
        run: |
          chmod +x ./.github/scripts/run-java.sh
          ./.github/scripts/run-java.sh | tee java-output.txt

      - name: Summarize status
        if: ${{ always() }}
        run: |
          mkdir -p "$STATUS_DIR"
          ts="$(date -u +'%Y-%m-%d %H:%M:%SZ')"
          {
            if [ "${{ steps.run_java.outcome }}" = "success" ]; then
              echo "## ‚úÖ Java example passed"
            else
              echo "## ‚ùå Java example failed"
            fi
            echo "- Timestamp (UTC): ${ts}"
            echo "- Network: ${HEDERA_NETWORK}"
            echo ""
            echo "<details><summary>Output</summary>"
            if [ -f java-output.txt ]; then
              if [ -f ./.github/scripts/redact.sh ]; then
                bash ./.github/scripts/redact.sh "${{ steps.solo.outputs.ecdsaPrivateKey }}" java-output.txt || cat java-output.txt
              else
                cat java-output.txt
              fi
            else
              echo "_No output captured._"
            fi
            echo "</details>"
          } > "$STATUS_FILE"

      - name: Open/Update PR with status
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: update example run status"
          signoff: true
          title: "chore: example run status"
          body: "Automated run of examples"
          branch: "bot/java-example-check"
          add-paths: ${{ env.STATUS_FILE }}
          # If your token can't create labels, remove the next line
          labels: automated-pr
          delete-branch: true
